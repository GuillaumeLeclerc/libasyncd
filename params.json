{"name":"Libasyncd","tagline":"Embeddable Event-based Asynchronous Message/HTTP Server library for C/C++","body":"libasyncd\r\n=========\r\n\r\nEmbeddable Event-based Asynchronous Message/HTTP Server library for C/C++.\r\n\r\n## What is libasyncd?\r\n\r\nLibasyncd is an embeddable event-driven asynchronous message server for C/C++.\r\nIt supports HTTP protocol by default and you can add your own protocol handler(hook)\r\nto build your own high performance server.\r\n\r\nAsynchronous way of programming can easily go quite complicated since you need to\r\nhandle every possible things in non-blocking way. So the goal of Libasyncd project is\r\nto make a flexible and fast asynchronous server framework with nice abstraction that\r\ncan cut down the complexity.\r\n\r\n## Why libasyncd?\r\n\r\n* Stands as a generic event-based server library.\r\n* Not only for HTTP server but also as a RPC server, as a Protocol Buffer channel,\r\n  as a Message transforming layer...\r\n* Embeddable library module - you write main().\r\n* Simple to use.\r\n* Pluggable protocols.\r\n* HTTP protocol handler (support chunked transfer-encoding)\r\n* Support of multiple hooks.\r\n* Support request pipelining.\r\n* Support SSL - Just flip the switch on.\r\n\r\n## Compile & Install.\r\n```\r\n$ git clone git clone https://github.com/wolkykim/libasyncd\r\n$ cd libasyncd\r\n$ (cd lib; run2init-submodules.sh; cd qlibc; ./configure; make) \r\n$ ./configure\r\n$ make\r\n```\r\n\r\n## API Reference\r\n\r\n* [libasyncd API reference](http://wolkykim.github.io/libasyncd/doc/html/)\r\n\r\n## \"Hello World\", Asynchronous Socket Server example.\r\n```\r\nint my_conn_handler(short event, ad_conn_t *conn, void *userdata) {\r\n    if (event & AD_EVENT_WRITE) {\r\n        evbuffer_add_printf(conn->out, \"Hello World.\");\r\n        return AD_CLOSE;\r\n    }\r\n    return AD_OK;\r\n}\r\n\r\nint main(int argc, char **argv) {\r\n    ad_log_level(AD_LOG_DEBUG);\r\n    ad_server_t *server = ad_server_new();\r\n    ad_server_set_option(server, \"server.port\", \"2222\");\r\n    ad_server_register_hook(server, my_conn_handler, NULL);\r\n    return ad_server_start(server);\r\n}\r\n```\r\n\r\n## \"Hello World\", Asynchronous HTTPS Server example.\r\n```\r\nint my_http_get_handler(short event, ad_conn_t *conn, void *userdata) {\r\n    if (ad_http_get_status(conn) == AD_HTTP_REQ_DONE) {\r\n        ad_http_response(conn, 200, \"text/html\", \"Hello World\", 11);\r\n        return AD_DONE; // Keep connection alive.\r\n    }\r\n    return AD_OK;\r\n}\r\n\r\nint my_http_default_handler(short event, ad_conn_t *conn, void *userdata) {\r\n    if (ad_http_get_status(conn) == AD_HTTP_REQ_DONE) {\r\n        ad_http_response(conn, 501, \"text/html\", \"Not implemented\", 15);\r\n        return AD_CLOSE; // Close connection.\r\n    }\r\n    return AD_OK;\r\n}\r\n\r\nint main(int argc, char **argv) {\r\n    ad_log_level(AD_LOG_DEBUG);\r\n    ad_server_t *server = ad_server_new();\r\n    ad_server_set_option(server, \"server.port\", \"8888\");\r\n    ad_server_set_option(server, \"server.ssl_cert\", \"ssl.cert\");\r\n    ad_server_set_option(server, \"server.ssl_pkey\", \"ssl.pkey\")\r\n    ad_server_register_hook(server, ad_http_handler, NULL); // HTTP Parser is also a hook.\r\n    ad_server_register_hook_on_method(server, \"GET\", my_http_get_handler, NULL);\r\n    ad_server_register_hook(server, my_http_default_handler, NULL);\r\n\r\n    return ad_server_start(server);\r\n}\r\n```\r\n\r\nPlease refer sample codes such as echo example in examples directory for more details.\r\n\r\n## References\r\n\r\n* [C10K problem](http://en.wikipedia.org/wiki/C10k_problem)\r\n* [libevent library - an event notification library](http://libevent.org/)\r\n* [qLibc library - a STL like C library](http://wolkykim.github.io/qlibc/)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}